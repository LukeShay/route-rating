# type Task
#   @model
#   @auth(
#     rules: [
#       { allow: groups, groups: ["Managers"], queries: null, mutations: [create, update, delete] }
#       { allow: groups, groups: ["Employees"], queries: [get, list], mutations: null }
#     ]
#   ) {
#   id: ID!
#   title: String
#   description: String
#   status: String
# }
# type PrivateNote @model @auth(rules: [{ allow: owner }]) {
#   id: ID!
#   content: String
# }
# type User
#   @model
#   @key(
#     name: "ByKey",
#     fields: ["key"],
#     queryField: "userByKey"
#   )
#   @key(
#     name: "ByEmail",
#     fields: ["email"],
#     queryField: "userByEmail"
#   ) {
#   id: ID!
#   key: String
#   email: String
#   givenName: String
#   familyName: String
#   address1: String
#   address2: String
#   city: String
#   state: String
#   zip: String
#   phone: String
#   type: String
#   picture: String
# }

type Route
  @model
  @auth(rules: [
    { allow: groups, groups: ["Admin"], mutations: [create, update, delete] },
    { allow: owner, ownerField: "owner", mutations: [update] },
    { allow: owner, ownerField: "editors", mutations: [update] }
  ])
  @key(
    name: "ByKey",
    fields: ["key"],
    queryField: "routeByKey"
  )
  @key(
    name: "ByWall",
    fields: ["wallId"],
    queryField: "routeByWall"
  )
  {
  id: ID!
  key: String
  rating: String
  difficulty: String
  color: String
  setter: String
  types: [String]
  wallId: ID!
  name: String
  editors: [String]
}

type Wall
  @model
  @auth(rules: [
    { allow: groups, groups: ["Admin"], mutations: [create, update, delete] },
    { allow: owner, ownerField: "owner", mutations: [update] },
    { allow: owner, ownerField: "editors", mutations: [update] }
  ])
  @key(
    name: "ByKey",
    fields: ["key"],
    queryField: "wallByKey"
  )
  @key(
    name: "ByGym",
    fields: ["gymId"],
    queryField: "wallByGym"
  ) {
  id: ID!
  key: String
  gymId: ID!
  routes: [Route] @connection(keyName: "ByWall", fields: ["id"])
  name: String
  editors: [String]
}

type Gym
  @model
  @searchable
  @auth(rules: [
    { allow: groups, groups: ["Admin"], mutations: [create, update, delete] },
    { allow: owner, ownerField: "owner", mutations: [update] }
  ])
  @key(
    name: "ByKey",
    fields: ["key"],
    queryField: "gymByKey"
  ) {
  id: ID!
  key: String
  name: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  website: String
  logo: String
  email: String
  walls: [Wall] @connection(keyName: "ByGym", fields: ["id"])
  editors: [String]
  disabled: Boolean @auth(rules: [
    { allow: groups, groups: ["Admin"], operations: [update, read] }
  ])
}
